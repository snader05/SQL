# For this project, I downloaded Spotify data from Kaggle.
# Then I created a table to insert Spotify data into.
# Finally, I performed analytics on the data using SQL. 

#Creating the table: 
CREATE TABLE BIT_DB.Spotifydata (
id integer PRIMARY KEY,
artist_name varchar NOT NULL,
track_name varchar NOT NULL,
track_id varchar NOT NULL,
popularity integer NOT NULL,
danceability decimal(4,3) NOT NULL,
energy decimal(4,3) NOT NULL,
key integer NOT NULL,
loudness decimal(5,3) NOT NULL,
mode integer NOT NULL,
speechiness decimal(5,4) NOT NULL,
acousticness decimal(6,5) NOT NULL,
instrumentalness text NOT NULL,
liveness decimal(5,4) NOT NULL,
valence decimal(4,3) NOT NULL,
tempo decimal(6,3) NOT NULL,
duration_ms integer NOT NULL,
time_signature integer NOT NULL 
)

#Then I inserted the Spotify Data .csv into the table.

#Next, I explored the data using the following SQL. 

#Then I used queries to determine the answers to the following questions.

#Who are the top 10 artists based on popularity?
SELECT artist_name, popularity
FROM BIT_DB.Spotifydata
ORDER BY popularity desc
LIMIT 10; 

#What artist released the longest song?
SELECT artist_name, track_name, max(duration_ms)
FROM BIT_DB.Spotifydata
LIMIT 1; 

#How many songs are there with featured artists?
SELECT count(track_name) as 'num of feat tracks'
FROM BIT_DB.Spotifydata
WHERE track_name like '%feat%'; 

#How many artists show up in the top 50 more than once?
SELECT artist_name, count(artist_name)
FROM BIT_DB.Spotifydata
GROUP BY artist_name 
HAVING count(artist_name) > 1 
ORDER BY count(artist_name) desc; 

#Which tracks are above the average in regards to acousticness?
SELECT track_name, acousticness
FROM BIT_DB.Spotifydata
WHERE acousticness > (SELECT avg(acousticness)
FROM BIT_DB.Spotifydata)
ORDER BY acousticness desc; 
